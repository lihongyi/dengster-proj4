Design Decisions:
So like the spec asked, we wrote an auxiliary class dealing with all the lock stuff. The spec pretty much wrote this class for us. We have 2 hashtables -- one for shared locks, the other for exclusive -- that map a page to the transaction(s) have a respective lock on said page. There are then 4 methods: [1] getLock (self-explanatory) [2] releaseLock (also self-explanatory / mandated by spec) [3] releaseAllLocks (which basically just calls releaseLock for every appropriate situation) [4] holdsLock (which is a boolean that tests whether or not a lock / mandated by spec). A lot of hair-pulling/wrangling was needed to write this class.

For deadlock, we just used a time-out policy of 300 seconds. This was achieved by measuring the time our 'while-the-lock-is-not-free' loop took to run. If it exceeded 300 seconds, we threw an exception.

Lastly, we decided to manually call the releaseAllLocks method before we threw said exception because people on Piazza said it would help speed up our tests.


For evictPage and transactionComplete, there were not any design decisions as it was pretty straightfoward with what was specified.

NO STEAL/FORCE vs STEAL/NO FORCE buffer management policy:

STEAL/NO FORCE is more complicated because STEAL complicates atomicity since we could possible have dirty writes, and NO FORCE is more difficult to implement durability, and might still have to force some pages to disk, but minimal. If our system could crash while running transactionComplete then we would have to implement a way of making sure we can undo and redo the write, so that we can clear the dirty write, and make sure that we get a clean write. In other words, this would mean we would need a logging system for STEAL/NO FORCE.


ACID properties
No steal and force ensure atomicity and durability.

API changes:
We do not think we made any API changes...